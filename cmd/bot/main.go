package main

import (
	"fmt"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"

	"github.com/greyadams/kitten_bot/internal/logger"

	"github.com/greyadams/kitten_bot/internal/client"
	"github.com/greyadams/kitten_bot/internal/storage"
)

func main() {
	//–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	log := logger.InitLogger()

	//–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è .env
	err := godotenv.Load(".env")
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	token := os.Getenv("TELEGRAM_TOKEN")
	if token == "" {
		log.Fatal("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %s", err)
	}

	log.Infof("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

	stats := &storage.Stats{}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		//–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		log.WithFields(map[string]interface{}{
			"user_id":  update.Message.From.ID,
			"username": update.Message.From.UserName,
			"command":  update.Message.Text,
		}).Info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")

		if update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç–∏–∫ ! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å –º–∏–ª—ã—Ö –∫–æ—Ç–∏–∫–æ–≤ üê±\n –ù–∞–ø–∏—à–∏ /meow, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞!")
				if _, err := bot.Send(msg); err != nil {
					log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start")
				} else {
					log.Info("–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
				}
			case "meow":
				catURL, err := client.GetRandomCatImageURL()
				if err != nil {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞ üòø")
					bot.Send(msg)
					log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /meow")
					continue
				}

				photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(catURL))
				if _, err := bot.Send(photo); err != nil {
					log.WithError(err).Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ üòø")
				} else {
					log.Info("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
				}
				photo.Caption = "–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç–∏–∫! üê±"

				stats.IncCat()

			/*case "meme":
			url, err := client.GetRandomMemeURL()
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞ üòø")
				bot.Send(msg)
				continue
			}

			photo := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileURL(url))
			photo.Caption = "üò∏üò∏üò∏"
			bot.Send(photo)
			stats.IncMeme()
			*/
			case "stats":
				cats, memes := stats.GetStats()
				text := fmt.Sprintf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ö–æ—Ç–∏–∫–∏: %d\n–ú–µ–º—ã: %d", cats, memes)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
				bot.Send(msg)

			default:
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ú—è—É, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é üòø")
				if _, err := bot.Send(msg); err != nil {
					log.WithError(err).Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ")
				} else {
					log.Warn("–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
				}
			}
		}
	}

}
